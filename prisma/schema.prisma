// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Position {
  KEEPER
  BACK
  CENTRE_BACK
  MIDTFIELDER
  WINGER
  STRIKER
}

enum MatchEventType {
  GOAL
  YELLOW_CARD
  RED_CARD
}

enum Venue {
  TEMPE_KUNSTGRESS
  TEMPE_HOVEDBANE
  OTHER
}

enum CompetitionType {
  AVDELING_A
  AVDELING_B
  AVDELING_C
  A_SLUTTSPILL
  B_SLUTTSPILL
  C_SLUTTSPILL
  D_SLUTTSPILL
  E_SLUTTSPILL
  FRIENDLY
}

enum SemesterType {
  AUTUMN
  SPRING
}

enum GenderType {
  MAN
  WOMAN
}

model User {
  id                    String             @id @default(cuid())
  username              String             @unique
  email                 String?            @unique
  password              String?
  role                  UserRole           @default(USER)
  relatedClub           Club?              @relation(fields: [clubId], references: [id])
  clubId                Int?
  createdNotifications  Notification[]     @relation(name: "UserCreatedNotifications")
  receivedNotifications UserNotification[]
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Club {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  instagram   String?
  coefficient Int?

  users                    User[]
  players                  Player[]
  homeMatches              Match[]                    @relation("HomeTeam")
  awayMatches              Match[]                    @relation("AwayTeam")
  match                    Match[]                    @relation("ResponsibleRefereeClub")
  competitionParticipation CompetitionParticipation[]
  Squad                    Squad[]
}

model Competition {
  id                       Int                        @id @default(autoincrement())
  type                     CompetitionType
  year                     Int
  semester                 SemesterType
  competitionRound         CompetitionRound[]
  competitionParticipation CompetitionParticipation[]
}

model CompetitionRound {
  id            Int         @id @default(autoincrement())
  round         Int
  competitionId Int
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  match         Match[]

  @@unique([round, competitionId])
}

model CompetitionParticipation {
  clubId        Int
  competitionId Int
  club          Club        @relation(fields: [clubId], references: [id], onDelete: Cascade)
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@id([clubId, competitionId])
  @@unique([clubId, competitionId])
}

model Match {
  id                       Int              @id @default(autoincrement())
  competitionRoundId       Int
  kickoffTime              DateTime?
  venue                    Venue?
  homeClubId               Int
  awayClubId               Int
  homeGoals                Int?
  awayGoals                Int?
  isMatchEventsConfirmed   Boolean          @default(false)
  responsibleRefereeClubId Int
  competitionRound         CompetitionRound @relation(fields: [competitionRoundId], references: [id])
  homeTeam                 Club             @relation(name: "HomeTeam", fields: [homeClubId], references: [id])
  awayTeam                 Club             @relation(name: "AwayTeam", fields: [awayClubId], references: [id])
  responsibleRefereeClub   Club             @relation(name: "ResponsibleRefereeClub", fields: [responsibleRefereeClubId], references: [id])
  squad                    Squad[]
}

model Player {
  id                   Int           @id @default(autoincrement())
  nifId                Int?          @unique
  firstName            String
  dateOfBirth          DateTime?
  lastName             String?
  email                String?
  position             Position?
  gender               GenderType?   @default(MAN)
  isActive             Boolean       @default(true)
  hasPaidMembershipFee Boolean       @default(false)
  clubId               Int?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  nifUpdatedAt         DateTime?
  relatedClub          Club?         @relation(fields: [clubId], references: [id], onDelete: SetNull)
  squadPlayer          SquadPlayer[]
}

model Squad {
  id      Int           @id @default(autoincrement())
  matchId Int
  clubId  Int
  players SquadPlayer[]

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  club  Club  @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([matchId, clubId])
}

model SquadPlayer {
  id       Int @id @default(autoincrement())
  squadId  Int
  playerId Int

  squad      Squad        @relation(fields: [squadId], references: [id], onDelete: Cascade)
  player     Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  matchEvent MatchEvent[]

  @@unique([squadId, playerId])
}

model MatchEvent {
  id            Int            @id @default(autoincrement())
  type          MatchEventType
  squadPlayerId Int
  squadPlayer   SquadPlayer    @relation(fields: [squadPlayerId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int                @id @default(autoincrement())
  title      String
  infoText   String
  createdAt  DateTime           @default(now())
  creatorId  String
  creator    User               @relation(name: "UserCreatedNotifications", fields: [creatorId], references: [id])
  recipients UserNotification[]
}

model UserNotification {
  userId         String
  notificationId Int
  isRead         Boolean      @default(false)
  readAt         DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@id([userId, notificationId])
}
