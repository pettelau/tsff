// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Position {
  KEEPER
  BACK
  CENTRE_BACK
  MIDTFIELDER
  WINGER
  STRIKER
}

enum MatchEventType {
  GOAL
  YELLOW_CARD
  RED_CARD
}

enum Venue {
  TEMPE_KUNSTGRESS
  TEMPE_HOVEDBANE
  OTHER
}

enum CompetitionType {
  AVDELING_A
  AVDELING_B
  AVDELING_C
  A_SLUTTSPILL
  B_SLUTTSPILL
  C_SLUTTSPILL
  D_SLUTTSPILL
  E_SLUTTSPILL
  FRIENDLY
}

enum SemesterType {
  AUTUMN
  SPRING
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String?  @unique
  password    String?
  role        UserRole @default(USER)
  relatedClub Club?    @relation(fields: [clubId], references: [id])
  clubId      Int?
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Club {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  instagram   String?
  coefficient Int?

  users                    User[]
  players                  Player[]
  homeMatches              Match[]                    @relation("HomeTeam")
  awayMatches              Match[]                    @relation("AwayTeam")
  match                    Match[]                    @relation("ResponsibleRefereeClub")
  competitionParticipation CompetitionParticipation[]
}

model Competition {
  id                       Int                        @id @default(autoincrement())
  type                     CompetitionType
  year                     Int
  semester                 SemesterType
  competitionRound         CompetitionRound[]
  competitionParticipation CompetitionParticipation[]
}

model CompetitionRound {
  id            Int         @id @default(autoincrement())
  round         Int
  competitionId Int
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  match         Match[]

  @@unique([round, competitionId])
}

model CompetitionParticipation {
  clubId        Int
  competitionId Int
  club          Club        @relation(fields: [clubId], references: [id], onDelete: Cascade)
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@id([clubId, competitionId])
  @@unique([clubId, competitionId])
}

model Match {
  id                       Int              @id @default(autoincrement())
  competitionRoundId       Int
  kickoffTime              DateTime?
  venue                    Venue?
  homeClubId               Int
  awayClubId               Int
  homeGoals                Int?
  awayGoals                Int?
  isMatchEventsConfirmed   Boolean          @default(false)
  responsibleRefereeClubId Int
  competitionRound         CompetitionRound @relation(fields: [competitionRoundId], references: [id])
  homeTeam                 Club             @relation(name: "HomeTeam", fields: [homeClubId], references: [id])
  awayTeam                 Club             @relation(name: "AwayTeam", fields: [awayClubId], references: [id])
  responsibleRefereeClub   Club             @relation(name: "ResponsibleRefereeClub", fields: [responsibleRefereeClubId], references: [id])
  matchEvent               MatchEvent[]
}

model Player {
  id          Int          @id @default(autoincrement())
  nifId       Int?         @unique
  firstName   String
  lastName    String?
  email       String?
  position    Position?
  isActive    Boolean      @default(true)
  clubId      Int?
  relatedClub Club?        @relation(fields: [clubId], references: [id], onDelete: SetNull)
  MatchEvent  MatchEvent[]
}

model MatchEvent {
  id       Int            @id @default(autoincrement())
  type     MatchEventType
  matchId  Int
  playerId Int
  match    Match          @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player   Player         @relation(fields: [playerId], references: [id], onDelete: Cascade)
}
